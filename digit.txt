import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

(x_train,y_train), (x_test,y_test) = keras.datasets.mnist.load_data()

len(x_test)

len(x_train)

x_train.shape

x_train = x_train/255
x_test = x_test/255
x_train[0]

plt.gray()
plt.matshow(x_train[0])

x_train_flat = x_train.reshape(len(x_train),28*28)
x_test_flat = x_test.reshape(len(x_test),28*28)

x_test_flat.shape

x_train_flat.shape

x_test_flat[0]
y_train[0:11]
y_test[0:11]
len(y_test)

model = keras.Sequential([
    keras.layers.Dense(10, input_shape=(784,), activation='sigmoid')
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train_flat, y_train, epochs=5)

model.evaluate(x_test_flat, y_test)

y_predict = model.predict(x_test_flat)

model = keras.Sequential([
    keras.layers.Dense(100, input_shape=(784,), activation='relu'),
    keras.layers.Dense(10, activation='sigmoid')
])
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train_flat, y_train, epochs=5)

model.evaluate(x_test_flat, y_test)
y_predict = model.predict(x_test_flat)